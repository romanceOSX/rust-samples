--> https://doc.rust-lang.org/book/ch10-02-traits.html

Generics features:
    - conditionally implement functions for specific traits through trait bounds
    - return trait objects from functions trhough dyn
    
blanket traits
    --> file:///Users/romance/.rustup/toolchains/stable-aarch64-apple-darwin/share/doc/rust/html/book/ch10-02-traits.html
    A blanket trait it makes a type to implement a certain trait if that type implements
    the decalred trait bounds, it is declared the following way

        impl<T: Display> ToString for T {
            // --snip--
        }

lifetimes
    - &'a u32
    lifetimes is all about relating lifetimes of parameters with the lifetime of
    a returning reference

todo
    TODO: review mutability and bindings

Lifetime rules, these apply to fn's and impl's
    one rule for input parameters
    second and third rule are for output params
    1- each parameter will get a lifetime
    2- if there is a single input reference, all outputs will get its lifetime
    3- if one of the input is &self or &mut self, then all output refs get its lifetime
        This third rule implies that no references returned from a method should outlive
        the current object
        This might not be the case in some special scenarios, but it is the assumed thing
    

